volumes:
  postgres_volume:
    name: soinshop_db

  redis_volume:
    name: soinshop_cache

networks:
  backend:
    driver: bridge
    name: soinshop_backend

  frontend:
    driver: bridge
    name: soinshop_frontend
    ipam:
      config:
        - subnet: 172.18.0.0/16
          ip_range: 172.18.0.0/24

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      additional_contexts:
        database: ./postgres
      network: host
    restart: unless-stopped
    volumes:
      - ./postgres/database/migrations/versions:/usr/src/app/database/migrations/versions
    env_file:
      - backend/.env
      - postgres/.env
      - redis/.env
    expose:
      - 8080
    networks:
      - frontend
      - backend
    depends_on:
      - postgres

  telegram_bot:
    build:
      context: ./telegram_bot
      dockerfile: Dockerfile
      additional_contexts:
        database: ./postgres
      network: host
    restart: unless-stopped
    volumes:
      - ./postgres/database/migrations/versions:/usr/src/app/database/migrations/versions
      - ./telegram_bot/logs:/usr/src/app/logs
    env_file:
      - telegram_bot/.env
      - postgres/.env
      - redis/.env
    networks:
      - backend
    depends_on:
      - postgres

  postgres:
    image: postgres:17.6
    restart: unless-stopped
    volumes:
      - postgres_volume:/var/lib/postgresql/data
    #      - ./postgres/backups:/var/backups/postgres
    env_file: postgres/.env
    expose:
      - 5432
    networks:
      - backend
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER
      interval: 15s
      timeout: 5s
      retries: 3

  redis:
    image: redis:8.2.2
    restart: unless-stopped
    env_file: redis/.env
    expose:
      - 6379
    networks:
      - backend
    volumes:
      - redis_volume:/data

  nginx-proxy:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    networks:
      frontend:
        ipv4_address: 172.18.1.0
    depends_on:
      - backend
      - frontend-main
      - frontend-admin-panel

  frontend-main:
    build:
      context: ./frontend/main
      dockerfile: Dockerfile
      network: host
    restart: unless-stopped
    env_file:
      - frontend/main/.env
    expose:
      - 3000
    networks:
      - frontend

  frontend-admin-panel:
    build:
      context: ./frontend/admin_panel
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - frontend/admin_panel/.env
    expose:
      - 3000
    networks:
      - frontend
