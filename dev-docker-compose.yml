volumes:
  postgres_volume:
    name: soinshop_db

  redis_volume:
    name: soinshop_cache

networks:
  soinshop_backend:
    driver: bridge
    name: soinshop_backend

  soinshop_frontend:
    driver: bridge
    name: soinshop_frontend

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      additional_contexts:
        database: ./postgres
    restart: unless-stopped
    volumes:
      - ./postgres/database:/usr/src/app/database
      - ./backend:/usr/src/app
    env_file:
      - backend/dev.env
      - postgres/.env
      - redis/.env
    ports:
      - "8080:8080"
    expose:
      - 8080
    networks:
      - soinshop_backend
    depends_on:
      - postgres

  telegram_bot:
    build:
      context: ./telegram_bot
      dockerfile: Dockerfile
      additional_contexts:
        database: ./postgres
    restart: unless-stopped
    volumes:
      - ./postgres/database:/usr/src/app/database
      - ./telegram_bot:/usr/src/app
    env_file:
      - telegram_bot/dev.env
      - postgres/.env
      - redis/.env
    networks:
      - soinshop_backend
    depends_on:
      - postgres

  postgres:
    image: postgres:17.6
    restart: unless-stopped
    volumes:
      - postgres_volume:/var/lib/postgresql/data
    #      - ./postgres/backups:/var/backups/postgres
    env_file: postgres/.env
    ports:
      - "5432:5432"
    expose:
      - 5432
    networks:
      - soinshop_backend
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER
      interval: 15s
      timeout: 5s
      retries: 3

  redis:
    image: redis:8.2.2
    restart: unless-stopped
    env_file: redis/.env
    ports:
      - "6379:6379"
    expose:
      - 6379
    networks:
      - soinshop_backend
    volumes:
      - redis_volume:/data

  frontend-main:
    build:
      context: ./frontend/main
      dockerfile: Dockerfile.dev
    env_file:
      - frontend/main/dev.env
    ports:
      - "3000:3000"
    expose:
      - 3000
    networks:
      - soinshop_frontend
      - soinshop_backend

  frontend-admin-panel:
    build:
      context: ./frontend/admin_panel
      dockerfile: Dockerfile.dev
    env_file:
      - frontend/admin_panel/dev.env
    ports:
      - "3001:3000"
    expose:
      - 3000
    networks:
      - soinshop_frontend
      - soinshop_backend

  nginx-proxy:
    build:
      context: ./nginx
      dockerfile: Dockerfile.dev
    ports:
      - "80:80"
      - "443:443"
    networks:
      - soinshop_frontend
    depends_on:
      - frontend-main
      - frontend-admin-panel
